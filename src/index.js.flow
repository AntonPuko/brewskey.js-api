// @flow

/* Entities */

export type EntityID = string | number;

export type EntityName =
  'accounts' |
  'beverage-availabilities' |
  'beverage-glasses' |
  'beverage-srms' |
  'beverage-styles' |
  'beverages' |
  'chart' |
  'devices' |
  'kegs' |
  'locations' |
  'organizations' |
  'permissions' |
  'pours' |
  'reports' |
  'schedule-groups' |
  'schedules' |
  'taps';


export type ShortenedEntity = { id: EntityID, name: string };

export type Account = {
  accessFailedCount: ?number,
  banned: ?boolean,
  createdDate: Date,
  email: ?string,
  emailConfirmed: ?boolean,
  fullName: ?string,
  id: EntityID,
  lockoutEnabled: ?boolean,
  lockoutEndDateUtc: ?string,
  logins: ?Object,
  phoneNumber: ?string,
  phoneNumberConfirmed: ?boolean,
  roles: ?Object,
  twoFactorEnabled: ?boolean,
  userName: string,
};

export type AccountMutator = {
  email: string,
  fullName: ?string,
  phoneNumber: ?string,
  userName: string,
};

export type Availability = {
  description: ?string,
  id: EntityID,
  name: string,
};

export type BeverageType =
  'Beer' |
  'Cider' |
  'Coffee' |
  'Soda';

export type ServingTemperature =
  'cellar' |
  'cold' |
  'cool' |
  'hot' |
  'very_cold' |
  'warm';

export type Coordinates = {
  latitude: number,
  longitude: number,
};

export type Beverage = {
  abv: number,
  availability: ?Availability,
  beerVariationId: ?EntityID,
  beverageType: BeverageType,
  createDate: Date,
  createdBy: {
    id: EntityID,
    userName: string,
  },
  description: ?string,
  externalId: ?string,
  foodPairings: ?string,
  glassware: ?Glass,
  ibu: number,
  id: EntityID,
  isDeleted: boolean,
  isOrganic: ?string,
  labels: {
    icon: string,
    large: string,
    medium: string,
  },
  name: string,
  originalGravity: ?number,
  servingTemperature: ?ServingTemperature,
  servingTemperatureDisplay: ?string,
  srm: ?Srm,
  style: ?Object,
  updateDate: Date,
  year: ?number,
};

export type PourChartDataType =
  'all-with-tap-id'|
  'by-location'|
  'by-tap'|
  'hourly-by-location'|
  'hourly-by-tap';

export type PourChartParams = {
  beginDate?: ?Date,
  chartType: PourChartDataType,
  endDate?: ?Date,
  ids?: Array<string>,
};

export type PourChartDataEntry = {
  keys: Array<string>,
  value: number,
};

export type PourChartDataSet = {
  dataSet: Array<PourChartDataEntry>,
  key: string,
};

export type DeviceStatus =
  'Active'|
  'Cleaning'|
  'Free'|
  'Inactive';

export type DeviceType = 'BrewskeyBox' | 'Onsite'

export type Device = {
  createdBy: { id: EntityID, userName: string  },
  deviceStatus: DeviceStatus,
  deviceType: DeviceType,
  id: EntityID,
  isDeleted: boolean,
  lastEdited: Date,
  lastEditedBy: { id: EntityID,  userName: string },
  location?: ShortenedEntity,
  name: string,
  organization: ShortenedEntity,
  particleId: string,
  temperature: number,
};

export type DeviceMutator = {
  deviceStatus: DeviceStatus,
  id?: string,
  isMultiTap: boolean,
  location: ?Location,
  name: string,
  particleId: string,
};

export type Glass = {
  createDate: Date,
  description: ?string,
  id: EntityID,
  name: string,
  updateDate: Date,
};

export type Keg = {
  beverage: ShortenedEntity,
  floatedDate: Date,
  id: EntityID,
  isDeleted: boolean,
  kegType: string,
  location: ?ShortenedEntity,
  maxOunces: number,
  organization: ShortenedEntity,
  ounces: number,
  pulses: number,
  tap: ?ShortenedEntity,
  tapDate: Date,
};

export type Location = {
  city: string,
  createdDate: Date,
  description: ?string,
  geolocation?: {
    coordinates: Coordinates,
    geography: {
      coordinateSystemId: number,
      wellKnownText: string,
      wellKnownBinary: ?Object,
    },
  },
  id: EntityID,
  isDeleted: boolean,
  locationType: string,
  name: string,
  organization: ShortenedEntity,
  state: ?string,
  street: string,
  suite: string,
  summary: string,
  timeZone: string,
  zipCode: number,
};

export type Organization = {
  createdDate: Date,
  id: EntityID,
  isDeleted: boolean,
  name: string,
};

export type PermissionEntityType =
  'devices' |
  'locations' |
  'organizations' |
  'taps';

export type PermissionType =
  'Administrator'|
  'Edit'|
  'Read'|
  'BannedFromTap';

export type Permission = {
  createdBy: {
    id: EntityID,
    userName: string,
  },
  createdDate: Date,
  device: ?ShortenedEntity,
  expiresDate: ?Date,
  forUser: {
    id: EntityID,
    userName: string,
  },
  id: EntityID,
  isDeleted: boolean,
  invalid: boolean,
  location: ?ShortenedEntity,
  organization: ?ShortenedEntity,
  permissionType: PermissionType,
  startDate: ?Date,
  tap: ?ShortenedEntity,
};

export type PermissionMutator<TEntity> = {
  entity: TEntity,
  entityType: PermissionEntityType,
  expiresDate: ?Date,
  id: ?EntityID,
  permissionType: PermissionType,
  startDate: ?Date,
  user: { id: EntityID,  userName: string },
};

export type Pour = {
  beverage: ?ShortenedEntity,
  id: EntityID,
  isDeleted: boolean,
  location: ?ShortenedEntity,
  organization: ShortenedEntity,
  ounces: number,
  owner: { id: EntityID, userName: string },
  pourDate: string,
  pulses: number,
  tap: ?ShortenedEntity,
};

export type Report = {
  createdDate: Date,
  devices: Array<ShortenedEntity>,
  id: EntityID,
  isDeleted: boolean,
  lastEdited: Date,
  locations: Array<ShortenedEntity>,
  name: string,
  reportCadence: ReportCadence,
  reportCadenceTimeStamp: Date,
  sendToEmails: Array<string>,
  taps: Array<ShortenedEntity>,
};

export type ReportMutator = {
  devices?: Array<ShortenedEntity>,
  id?: string,
  locations?: Array<ShortenedEntity>,
  name: string,
  reportCadence: ReportCadence,
  reportCadenceTimeStamp: Date,
  sendToEmails: Array<{ email: string }>,
  taps?: Array<ShortenedEntity>,
};

export type ReportCadence = 'OneTime' | 'Daily' | 'Weekly' | 'Biweekly' | 'Monthly';

export type Schedule = {
  accounts: Array<{
    id: EntityID,
    userName: string,
  }>,
  createdDate: Date,
  days: number,
  editDate: Date,
  endTime: Date,
  id: EntityID,
  isDeleted: boolean,
  location: ?ShortenedEntity,
  name: string,
  startTime: Date,
};

export type ScheduleMutator = {
  accounts: Array<{
    id: EntityID,
    userName: string,
  }>,
  days: number,
  endTime: Date,
  id: ?EntityID,
  locationId: ?EntityID,
  name: string,
  startTime: Date,
};

export type Srm = {
  hex: string,
  id: EntityID,
  name: string,
};

export type Style = {
  abvMax: number,
  abvMin: number,
  createDate: Date,
  description: ?string,
  fgMax: number,
  fgMin: number,
  ibuMax: number,
  ibuMin: number,
  id: EntityID,
  name: string,
  ogMax: number,
  ogMin: number,
  srmMax: number,
  srmMin: number,
  updateDate: Date,
};

export type Tap = {
  createdDate: Date,
  description: ?string,
  device: ShortenedEntity,
  disableBadges: boolean,
  hideLeaderboard: boolean,
  hideStats: boolean,
  id: EntityID,
  location: ?ShortenedEntity,
  name: string,
  organization: ShortenedEntity,
  requiresPourPrivilege: boolean,
};

export type TapMutator = {
  createdDate: ?string,
  description: ?string,
  device: Device,
  disableBadges: boolean,
  hideLeaderboard: boolean,
  hideStats: boolean,
  id: ?EntityID,
  name: string,
  requiresPourPrivilege: boolean,
};

/* DAO */

export type FilterOperator =
  'contains' |
    'endswith' |
    'eq' |
    'gt' |
    'ge' |
    'lt' |
    'le' |
    'not endswith' |
    'ne' |
    'not startswith' |
    'startswith';

export type QueryFilter = {
  operator: FilterOperator,
  params: Array<string>,
  values: Array<string>
};

export type QueryOrderBy = {
  column: string,
  direction: 'asc' | 'desc',
};

export type QueryOptions = {
  filters?: Array<QueryFilter>,
  orderBy?: Array<QueryOrderBy>,
  shouldCount?: boolean,
  skip?: number,
  take?: number,
};

export type SelectExpandQuery<TEntity> = {|
  expand?: {[key: $Keys<TEntity>]: Array<string>},
  select?: Array<$Keys<TEntity>>,
|};

export type DAOConfig<TEntity, TEntityMutator> = {|
  entityName: EntityName,
  selectExpandQuery?: SelectExpandQuery<TEntity>,
  translator: DAOTranslator<TEntity, TEntityMutator>,
|};

export type DAOTranslator<TEntity, TEntityMutator> = {
  +fromApi: (apiValue: Object) => TEntity,
  +toApi: (model: TEntityMutator) => Object,
  +toForm: (model: TEntity) => TEntityMutator,
};

declare export class BaseDAO<TEntity, TEntityMutator>  {
  getEntityName(): EntityName;
  getTranslator(): DAOTranslator<TEntity, TEntityMutator>;
}

declare export class DAO<TEntity: {id: EntityID}, TEntityMutator>
  extends BaseDAO<TEntity, TEntityMutator>  {
  count(queryOptions?: QueryOptions): LoadObject<number>;
  deleteByID(id: EntityID): void;
  fetchByID(id: EntityID): LoadObject<TEntity>;
  fetchByIDs(ids: Array<string>, meta?: Object): LoadObject<Array<TEntity>>;
  fetchMany(queryOptions?: QueryOptions): LoadObject<Array<TEntity>>;
  patch(id: EntityID, params: TEntityMutator): void;
  post(params: TEntityMutator): void;
  put(id: EntityID, params: TEntityMutator): void;
}

declare class brewskey$AccountDAO extends DAO<Account, AccountMutator> {}
declare class brewskey$AvailabilityDAO
  extends DAO<Availability, Availability> {}
declare class brewskey$BeverageDAO extends DAO<Beverage, Beverage> {}
declare class brewskey$DeviceDAO extends DAO<Device, DeviceMutator> {}
declare class brewskey$GlassDAO extends DAO<Glass, Glass> {}
declare class brewskey$KegDAO extends DAO<Keg, Keg> {
  fetchKegByTapID(tapId: EntityID): Promise<DAOResult<Keg>>;
}
declare class brewskey$LocationDAO extends DAO<Location, Location> {}
declare class brewskey$OrganizationDAO extends DAO<Organization, Organization> {}
declare class brewskey$PermissionDAO
  extends DAO<Permission, PermissionMutator<*>> {}
declare class brewskey$PourDAO extends DAO<Pour, Pour> {}
declare class brewkey$PourChartDAO extends BaseDAO<PourChartDataSet, PourChartDataSet> {
  fetchChartData(params: PourChartParams): Promise<PourChartDataSet>;
}
declare class brewskey$ReportDAO extends DAO<Report, ReportMutator> {}
declare class brewskey$ScheduleDAO extends DAO<Schedule, ScheduleMutator> {}
declare class brewskey$SrmDAO extends DAO<Srm, Srm> {}
declare class brewskey$StyleDAO extends DAO<Style, Style> {}
declare class brewskey$TapDAO extends DAO<Tap, TapMutator> {}



/* Utilities */
export type Header = {
  name: string,
  value: string,
};

export type Headers = Array<Header>;

export type FilterCreator = (params: any) => QueryFilter;
export type FilterCreators = { [string]: FilterCreator };

export type RequestMethod =
  'delete' |
  'get' |
  'patch' |
  'post' |
  'put';


/* exports */

export type OConfig = {
  endpoint: string,
  headers?: Headers,
};

type DAOApi = {
  AccountDAO: brewskey$AccountDAO,
  AvailabilityDAO: brewskey$AvailabilityDAO,
  BeverageDAO: brewskey$BeverageDAO,
  DeviceDAO: brewskey$DeviceDAO,
  GlassDAO: brewskey$GlassDAO,
  KegDAO: brewskey$KegDAO,
  LocationDAO: brewskey$LocationDAO,
  OrganizationDAO: brewskey$OrganizationDAO,
  PermissionDAO: brewskey$PermissionDAO,
  PourChartDAO: brewkey$PourChartDAO,
  PourDAO: brewskey$PourDAO,
  ReportDAO: brewskey$ReportDAO,
  ScheduleDAO: brewskey$ScheduleDAO,
  SrmDAO: brewskey$SrmDAO,
  StyleDAO: brewskey$StyleDAO,
  TapDAO: brewskey$TapDAO,
  createFilter(params: string): FilterCreators,
  doesSatisfyToQueryFilters(
    item: Object,
    queryFilters: Array<QueryFilter>,
  ): boolean,
  fetch(path: string, init: ?Object): Promise<*>,
  getHeaders(): Headers,
  initializeDAOApi(config: OConfig): void,
  setHeaders(headers: Headers): void,
  setOrganizationID(organizationID: ?EntityID): void,
}

declare export var CADENCE_MAP: { [ReportCadence]: number };
declare export var DAO_ENTITIES: { [string]: EntityName };
declare export var PERMISSIONS_MAP: { [PermissionType]: number };

declare export default DAOApi;
