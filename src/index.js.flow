// @flow

import type { LoadObjectOperation } from './LoadObject';

export type EntityID = string | number;

/* Entities */

export type EntityName =
  | 'accounts'
  | 'beverage-availabilities'
  | 'beverage-glasses'
  | 'beverage-srms'
  | 'beverage-styles'
  | 'beverages'
  | 'chart'
  | 'devices'
  | 'flow-sensors'
  | 'kegs'
  | 'locations'
  | 'organizations'
  | 'permissions'
  | 'pours'
  | 'reports'
  | 'schedule-groups'
  | 'schedules'
  | 'taps';

export type ShortenedEntity = { id: EntityID, name: string };

export type Account = {
  accessFailedCount: ?number,
  banned: ?boolean,
  createdDate: Date,
  email: ?string,
  emailConfirmed: ?boolean,
  fullName: ?string,
  id: EntityID,
  lockoutEnabled: ?boolean,
  lockoutEndDateUtc: ?string,
  logins: ?Object,
  phoneNumber: ?string,
  phoneNumberConfirmed: ?boolean,
  roles: ?Object,
  twoFactorEnabled: ?boolean,
  userName: string,
};

export type AccountMutator = {
  email: string,
  fullName: ?string,
  phoneNumber: ?string,
  userName: string,
};

export type AchievementType =
  | BackOnTheBus
  | BeerAficionado
  | BeerAuthority
  | BeerBeforeNoon
  | BeerBuff
  | BeerConnoisseur
  | DrankAKeg
  | DrankFiveKegs
  | DrankTenKegs
  | Edward40Hands
  | FirstPourOfTheDay
  | HatTrick
  | KingOfTheKeg
  | LastPourOfTheKeg
  | LastPourOfTheNight
  | LightWeight
  | PowerHour
  | SevenDaysStraight
  | Welcome;

export type Achievement = {|
  achievementType: AchievementType,
  createdDate: Date,
  id: EntityID,
|};

export type Availability = {
  description: ?string,
  id: EntityID,
  name: string,
};

export type BeverageType = 'Beer' | 'Cider' | 'Coffee' | 'Soda';

export type ServingTemperature =
  | 'cellar'
  | 'cold'
  | 'cool'
  | 'hot'
  | 'very_cold'
  | 'warm';

export type Coordinates = {
  latitude: number,
  longitude: number,
};

export type Beverage = {
  abv: number,
  availability: ?ShortenedEntity,
  beerVariationId: ?string,
  beverageType: BeverageType,
  createDate: Date,
  createdBy: {
    id: EntityID,
    userName: string,
  },
  description: ?string,
  externalId: ?string,
  foodPairings: ?string,
  glass: ?ShortenedEntity,
  ibu: number,
  id: EntityID,
  isDeleted: boolean,
  isOrganic: boolean,
  labels: {
    icon: string,
    large: string,
    medium: string,
  },
  name: string,
  originalGravity: ?number,
  servingTemperature: ?ServingTemperature,
  servingTemperatureDisplay: ?string,
  srm: ?Srm,
  style: ?ShortenedEntity,
  updateDate: Date,
  year: ?number,
};

export type BeverageMutator = {
  abv: ?number,
  availableId: ?EntityID,
  beerVariationId: ?EntityID,
  beverageType: BeverageType,
  description: ?string,
  externalId: ?EntityID,
  foodPairings: ?string,
  glasswareId: ?EntityID,
  ibu: ?number,
  id: ?EntityID,
  isOrganic: boolean,
  name: string,
  originalGravity: ?number,
  servingTemperature: ?ServingTemperature,
  servingTemperatureDisplay: ?string,
  srmId: ?EntityID,
  styleId: ?EntityID,
  year: ?number,
};

export type PourChartDataType =
  | 'all-with-tap-id'
  | 'by-location'
  | 'by-tap'
  | 'hourly-by-location'
  | 'hourly-by-tap';

export type PourChartParams = {
  beginDate?: ?Date,
  chartType: PourChartDataType,
  endDate?: ?Date,
  ids?: Array<string>,
};

export type PourChartDataEntry = {
  keys: Array<string>,
  value: number,
};

export type PourChartDataSet = {
  dataSet: Array<PourChartDataEntry>,
  key: string,
};

export type DeviceStatus = 'Active' | 'Cleaning' | 'Free' | 'Inactive';

export type DeviceType = 'BrewskeyBox' | 'Onsite';

export type Device = {
  createdBy: { id: EntityID, userName: string },
  deviceStatus: DeviceStatus,
  deviceType: DeviceType,
  id: EntityID,
  isDeleted: boolean,
  lastEdited: Date,
  lastEditedBy: { id: EntityID, userName: string },
  location?: ShortenedEntity,
  name: string,
  organization: ShortenedEntity,
  particleId: string,
  temperature: number,
};

export type DeviceMutator = {
  deviceStatus: DeviceStatus,
  deviceType: DeviceType,
  id?: EntityID,
  locationId: ?EntityID,
  name: string,
  particleId: string,
};

export type FlowSensorType =
  | 'Custom'
  | 'FT330'
  | 'Sea'
  | 'SwissFlowSF800'
  | 'Titan';

export type FlowSensor = {
  flowSensorType: FlowSensorType,
  id: EntityID,
  isDeleted: boolean,
  pulsesPerGallon: number,
  tap: ShortenedEntity,
};

export type FlowSensorMutator = {
  flowSensorType: FlowSensorType,
  id?: EntityID,
  pulsesPerGallon: number,
  tapId: EntityID,
};

export type Glass = {
  createDate: Date,
  description: ?string,
  id: EntityID,
  name: string,
  updateDate: Date,
};

export type KegType =
  | 'Cornelius'
  | 'HalfBarrel'
  | 'Mini'
  | 'QuarterBarrel'
  | 'SixthBarrel'
  | 'SlimQuarter';

export type Keg = {
  beverage: ShortenedEntity,
  floatedDate: Date,
  id: EntityID,
  isDeleted: boolean,
  kegType: KegType,
  location: ?ShortenedEntity,
  maxOunces: number,
  organization: ShortenedEntity,
  ounces: number,
  pulses: number,
  tap: ?ShortenedEntity,
  tapDate: Date,
};

export type KegMutator = {
  beverageId: EntityID,
  id?: EntityID,
  startingPercentage?: number,
  tapId: EntityID,
};

export type Location = {
  city: string,
  createdDate: Date,
  description: ?string,
  geolocation?: {
    coordinates: Coordinates,
    geography: {
      coordinateSystemId: number,
      wellKnownText: string,
      wellKnownBinary: ?Object,
    },
  },
  id: EntityID,
  isDeleted: boolean,
  locationType: string,
  name: string,
  organization: ShortenedEntity,
  state: ?string,
  street: string,
  suite: string,
  summary: string,
  timeZone: string,
  zipCode: number,
};

export type LocationMutator = {
  city: string,
  description: ?string,
  id: ?EntityID,
  isDeleted: boolean,
  locationType: string,
  name: string,
  organizationId: ?EntityID,
  state: ?string,
  street: string,
  suite: string,
  summary: string,
  timeZone: string,
  zipCode: number,
};

export type Organization = {
  createdDate: Date,
  id: EntityID,
  isDeleted: boolean,
  name: string,
};

export type PermissionEntityType =
  | 'devices'
  | 'locations'
  | 'organizations'
  | 'taps';

export type PermissionType =
  | 'Administrator'
  | 'Edit'
  | 'Read'
  | 'BannedFromTap';

export type Permission = {
  createdBy: {
    id: EntityID,
    userName: string,
  },
  createdDate: Date,
  device: ?ShortenedEntity,
  expiresDate: ?Date,
  forUser: {
    id: EntityID,
    userName: string,
  },
  id: EntityID,
  isDeleted: boolean,
  invalid: boolean,
  location: ?ShortenedEntity,
  organization: ?ShortenedEntity,
  permissionType: PermissionType,
  startDate: ?Date,
  tap: ?ShortenedEntity,
};

export type PermissionMutator<TEntity> = {
  entityId: EntityID,
  entityType: PermissionEntityType,
  expiresDate: ?Date,
  id: ?EntityID,
  permissionType: PermissionType,
  startDate: ?Date,
  userId: EntityID,
};

export type Pour = {
  beverage: ?ShortenedEntity,
  id: EntityID,
  isDeleted: boolean,
  location: ?ShortenedEntity,
  organization: ShortenedEntity,
  ounces: number,
  owner: { id: EntityID, userName: string },
  pourDate: string,
  pulses: number,
  tap: ?ShortenedEntity,
};

export type Report = {
  createdDate: Date,
  devices: Array<ShortenedEntity>,
  id: EntityID,
  isDeleted: boolean,
  lastEdited: Date,
  locations: Array<ShortenedEntity>,
  name: string,
  reportCadence: ReportCadence,
  reportCadenceTimeStamp: Date,
  sendToEmails: Array<string>,
  taps: Array<ShortenedEntity>,
};

export type ReportMutator = {
  devices?: Array<ShortenedEntity>,
  id?: EntityID,
  locations?: Array<ShortenedEntity>,
  name: string,
  reportCadence: ReportCadence,
  reportCadenceTimeStamp: Date,
  sendToEmails: Array<{ email: string }>,
  taps?: Array<ShortenedEntity>,
};

export type ReportCadence =
  | 'OneTime'
  | 'Daily'
  | 'Weekly'
  | 'Biweekly'
  | 'Monthly';

export type Schedule = {
  accounts: Array<{
    id: EntityID,
    userName: string,
  }>,
  createdDate: Date,
  days: number,
  editDate: Date,
  endTime: Date,
  id: EntityID,
  isDeleted: boolean,
  location: ?ShortenedEntity,
  name: string,
  startTime: Date,
};

export type ScheduleMutator = {
  accounts: Array<{
    id: EntityID,
    userName: string,
  }>,
  days: number,
  endTime: Date,
  id: ?EntityID,
  locationId: ?string,
  name: string,
  startTime: Date,
};

export type Srm = {
  hex: string,
  id: EntityID,
  name: string,
};

export type Style = {
  abvMax: number,
  abvMin: number,
  createDate: Date,
  description: ?string,
  fgMax: number,
  fgMin: number,
  ibuMax: number,
  ibuMin: number,
  id: EntityID,
  name: string,
  ogMax: number,
  ogMin: number,
  srmMax: number,
  srmMin: number,
  updateDate: Date,
};

export type Tap = {
  createdDate: Date,
  description: ?string,
  device: ShortenedEntity,
  disableBadges: boolean,
  hideLeaderboard: boolean,
  hideStats: boolean,
  id: EntityID,
  location: ?ShortenedEntity,
  name: string,
  organization: ShortenedEntity,
  requiresPourPrivilege: boolean,
};

export type TapMutator = {
  description: ?string,
  deviceId: ?EntityID,
  disableBadges: boolean,
  hideLeaderboard: boolean,
  hideStats: boolean,
  id: ?EntityID,
  locationId: ?EntityID,
  name: string,
  requiresPourPrivilege: boolean,
};

/* DAO */
declare export class LoadObject<VType> {
  static creating<Vtype>(): LoadObject<Vtype>;
  static deleting<Vtype>(): LoadObject<Vtype>;
  static empty<Vtype>(): LoadObject<Vtype>;
  static loading<Vtype>(): LoadObject<Vtype>;
  static updating<Vtype>(): LoadObject<Vtype>;
  static withError<Vtype>(error: Error): LoadObject<Vtype>;
  static withValue<Vtype>(value: Vtype): LoadObject<Vtype>;
  creating(): LoadObject<VType>;
  deleting(): LoadObject<VType>;
  done(): LoadObject<VType>;
  getError(): ?Error;
  getErrorEnforcing(): Error;
  getOperation(): LoadObjectOperation;
  getValue(): ?VType;
  getValueEnforcing(): VType;
  hasError(): boolean;
  hasOperation(): boolean;
  hasValue(): boolean;
  isCreating(): boolean;
  isDeleting(): boolean;
  isDone(): boolean;
  isEmpty(): boolean;
  isLoading(): boolean;
  isUpdating(): boolean;
  loading(): LoadObject<VType>;
  map<TType>(
    fn: (value: VType) => TType | LoadObject<TType>,
  ): LoadObject<TType>;
  mapError<TType>(
    fn: (value: Error) => Error | LoadObject<TType>,
  ): LoadObject<TType>;
  removeError(): LoadObject<VType>;
  removeOperation(): LoadObject<VType>;
  removeValue(): LoadObject<VType>;
  setError(error: Error): LoadObject<VType>;
  setOperation(operation: LoadObjectOperation): LoadObject<VType>;
  setValue(value: VType): LoadObject<VType>;
  updating(): LoadObject<VType>;
}

export type DAOResult = {
  data: any,
  inlinecount?: number,
};

export type FilterOperator =
  | 'contains'
  | 'endswith'
  | 'eq'
  | 'gt'
  | 'ge'
  | 'lt'
  | 'le'
  | 'not endswith'
  | 'ne'
  | 'not startswith'
  | 'startswith';

export type QueryFilter = {
  operator: FilterOperator,
  params: Array<string>,
  values: Array<string>,
};

export type QueryOrderBy = {
  column: string,
  direction: 'asc' | 'desc',
};

export type QueryOptions = {
  filters?: Array<QueryFilter>,
  orderBy?: Array<QueryOrderBy>,
  shouldCount?: boolean,
  skip?: number,
  take?: number,
};

export type SelectExpandQuery<TEntity> = {|
  expand?: { [key: $Keys<TEntity>]: Array<string> },
  select?: Array<$Keys<TEntity>>,
|};

export type DAOConfig<TEntity, TEntityMutator> = {|
  entityName: EntityName,
  selectExpandQuery?: SelectExpandQuery<TEntity>,
  translator: DAOTranslator<TEntity, TEntityMutator>,
|};

export type DAOTranslator<TEntity, TEntityMutator> = {
  +fromApi: (apiValue: Object) => TEntity,
  +toApi: (model: TEntityMutator) => Object,
  +toForm: (model: TEntity) => TEntityMutator,
};

declare export class BaseDAO<TEntity, TEntityMutator> {
  getEntityName(): EntityName;
  getTranslator(): DAOTranslator<TEntity, TEntityMutator>;
}

declare export class DAO<
  TEntity: { id: EntityID },
  TEntityMutator,
> extends BaseDAO<TEntity, TEntityMutator> {
  count(queryOptions?: QueryOptions): LoadObject<number>;
  deleteByID(id: EntityID): void;
  fetchByID(id: EntityID): LoadObject<TEntity>;
  fetchByIDs(
    ids: Array<string>,
    meta?: Object,
  ): Map<string, LoadObject<TEntity>>;
  fetchMany(
    queryOptions?: QueryOptions,
  ): LoadObject<Array<LoadObject<TEntity>>>;
  flushCache(): void;
  flushQueryCaches(): void;
  patch(id: EntityID, params: TEntityMutator): void;
  post(params: TEntityMutator): EntityID;
  put(id: EntityID, params: TEntityMutator): void;
  subscribe(handler: () => void): void;
  unsubscribe(handler: () => void): void;
  waitForLoaded<TResponse>(
    fn: () => LoadObject<TResponse>,
    timeout?: number,
  ): Promise<TResponse>;
}

declare class brewskey$AccountDAO extends DAO<Account, AccountMutator> {}
declare class brewskey$AchievementDAO extends DAO<Achievement, Achievement> {}
declare class brewskey$AvailabilityDAO extends DAO<
  Availability,
  Availability,
> {}
declare class brewskey$BeverageDAO extends DAO<Beverage, BeverageMutator> {}
declare class brewskey$DeviceDAO extends DAO<Device, DeviceMutator> {}
declare class brewskey$GlassDAO extends DAO<Glass, Glass> {}
declare class brewskey$FlowSensorDAO extends DAO<
  FlowSensor,
  FlowSensorMutator,
> {}
declare class brewskey$KegDAO extends DAO<Keg, KegMutator> {
  fetchKegByTapID(tapId: string): LoadObject<Array<LoadObject<Keg>>>;
}
declare class brewskey$LocationDAO extends DAO<Location, LocationMutator> {}
declare class brewskey$OrganizationDAO extends DAO<
  Organization,
  Organization,
> {}
declare class brewskey$PermissionDAO extends DAO<
  Permission,
  PermissionMutator<*>,
> {}
declare class brewskey$PourDAO extends DAO<Pour, Pour> {}
declare class brewskey$PourChartDAO extends BaseDAO<
  PourChartDataSet,
  PourChartDataSet,
> {
  fetchChartData(params: PourChartParams): Promise<PourChartDataSet>;
}
declare class brewskey$ReportDAO extends DAO<Report, ReportMutator> {}
declare class brewskey$ScheduleDAO extends DAO<Schedule, ScheduleMutator> {}
declare class brewskey$SrmDAO extends DAO<Srm, Srm> {}
declare class brewskey$StyleDAO extends DAO<Style, Style> {}
declare class brewskey$TapDAO extends DAO<Tap, TapMutator> {}

/* Utilities */
export type Header = {
  name: string,
  value: string,
};

export type Headers = Array<Header>;

export type FilterCreator = (params: any) => QueryFilter;
export type FilterCreators = { [string]: FilterCreator };

export type RequestMethod = 'delete' | 'get' | 'patch' | 'post' | 'put';

/* exports */

export type OConfig = {
  endpoint: string,
  headers?: Headers,
};

type DAOApi = {
  AccountDAO: brewskey$AccountDAO,
  AvailabilityDAO: brewskey$AvailabilityDAO,
  BeverageDAO: brewskey$BeverageDAO,
  DeviceDAO: brewskey$DeviceDAO,
  FlowSensorDAO: brewskey$FlowSensorDAO,
  GlassDAO: brewskey$GlassDAO,
  KegDAO: brewskey$KegDAO,
  LocationDAO: brewskey$LocationDAO,
  OrganizationDAO: brewskey$OrganizationDAO,
  PermissionDAO: brewskey$PermissionDAO,
  PourChartDAO: brewskey$PourChartDAO,
  PourDAO: brewskey$PourDAO,
  ReportDAO: brewskey$ReportDAO,
  ScheduleDAO: brewskey$ScheduleDAO,
  SrmDAO: brewskey$SrmDAO,
  StyleDAO: brewskey$StyleDAO,
  TapDAO: brewskey$TapDAO,
  createFilter(params: string): FilterCreators,
  doesSatisfyToQueryFilters(
    item: Object,
    queryFilters: Array<QueryFilter>,
  ): boolean,
  fetch(path: string, init: ?Object): Promise<*>,
  getHeaders(): Headers,
  initializeDAOApi(config: OConfig): void,
  setHeaders(headers: Headers): void,
  setOrganizationID(organizationID: ?EntityID): void,
};

declare export var CADENCE_MAP: { [ReportCadence]: number };
declare export var DAO_ENTITIES: { [string]: EntityName };
declare export var MAX_OUNCES_BY_KEG_TYPE: { [KegType]: number };
declare export var PERMISSIONS_MAP: { [PermissionType]: number };
declare export var LoadObject;
// declare export var LoadObject: ILoadObject;

declare export default DAOApi
